容器
序列容器：
array	固定大小，直接访问任意元素
deque	从前部或后部进行快速插入和删除操作，直接访问任何元素
forward_list	单链表，在任意位置快速插入和删除
list	双向链表，在任意位置进行快速插入和删除操作
vector	从后部进行快速插入和删除操作，直接访问任意元素

有序关联容器（键按顺序保存，红黑树）：
set	快速查找，无重复元素(key-key)
multiset	快速查找，可有重复元素
map	一对一映射，无重复元素，基于键快速查找(key-value)
multimap	一对一映射，可有重复元素，基于键快速查找

无序关联容器（哈希表）：
unordered_set	快速查找，无重复元素
unordered_multiset	快速查找，可有重复元素
unordered_map	一对一映射，无重复元素，基于键快速查找
unordered_multimap	一对一映射，可有重复元素，基于键快速查找

容器适配器：
stack	后进先出（LIFO）
queue	先进先出（FIFO）
priority_queue	优先级最高的元素先出

首类容器：序列容器 + 关联容器
==============================================================

迭代器
- 首类容器有begin和end
- *iter 可以调用迭代器的值
- ++iter 可以指向下一个值

随机访问迭代器(random access)	在双向迭代湍基础上增加了直接访问容器中任意元素的功能，即可以向前或向后跳转任意个元素
双向迭代器(bidirectional)	在前向迭代器基础上增加了向后移动的功能。支持多遍扫描算法
前向迭代器(forword)	综合输入和输出迭代器的功能，并能保持它们在容器中的位置（作为状态信息），可以使用同一个迭代器两次遍历一个容器（称为多遍扫描算法）
输出迭代器(output)	用于将元素写入容器。 输出迭代楛每次只能向前移动一个元索。 输出迭代器只支持一遍扫描算法，不能使用相同的输出迭代器两次遍历一个序列容器
输入迭代器(input)	用于从容器读取元素。 输入迭代器每次只能向前移动一个元素。 输入迭代器只支持一遍扫描算法，不能使用相同的输入迭代器两次遍历一个序列容器

vector	随机访问迭代器	set	双向迭代器
array	随机访问迭代器	multiset	双向迭代器
deque	随机访问迭代器	map	双向迭代器
list	双向迭代器	multimap	双向迭代器
forword_list	前向迭代器	unordered_set	双向迭代器
stack	不支持迭代器	unordered_multiset	双向迭代器
queue	不支持迭代器	unordered_map	双向迭代器
priority_queue	不支持迭代器	unordered_multimap	双向迭代器

iterator	向前	读/写
const_iterator	向前	读
reverse_iterator	向后	读/写
const_reverse_iterator	向后	读

==============================================================

操作

适用所有迭代器的操作	
++p	前置自增迭代器
p++	后置自增迭代器
p=p1	将一个迭代器赋值给另一个迭代器

输入迭代器	
*p	间接引用一个迭代器
p->m	使用迭代器读取元素m
p==p1	比较两个迭代器是否相等
p!=p1	比较两个迭代器是否不相等

输出迭代器	
*p	间接引用一个迭代器
p=p1	把一个迭代器赋值给另一个

前向迭代器	前向迭代器提供了输入和输出迭代器的所有功能

双向迭代器	
–p	q
p–	后置自减迭代器

随机访问迭代器	
p+=i	迭代器p前进i个位置
p-=i	迭代器p后退i个位置
p+i	 在迭代器p的位置上前进i个位置
p-i	 在迭代器p的位置上后退i个位置
p-p1	表达式的值是一个整数，它代表同一个容器中两个元素间的距离
p[i]	返回与迭代器p的位置相距i的元素
p<p1	若迭代器p小于p1(即容器中p在p1前）则返回 true, 否则返回 false
p<=p1	若迭代器p小千或等于p1 (即容器中p 在p1前或位咒相同）则返回 true, 否则返回 false
p>p1	若迭代器p 大于p1(即容器中p在p1后）则返回true, 否则返回false
p>=p1	若迭代器p大于或等于p1(即容楛中p在p1后或位置相同）则返回 true, 否则返回 false

========================================================

————————————————
版权声明：本文为CSDN博主「C.Chengtao」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_41921520/article/details/100585664
